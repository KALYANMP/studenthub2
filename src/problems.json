{
    "languages": [
      {
        "name": "Python",
        "problems": [
        
            {
                "id": 1,
                "title": "Add Two Numbers",
                "description": "Write a function that adds two numbers provided as input.",
                "sampleInput": "2 3",
                "sampleOutput": "5",
                "sampleCode": "def add_numbers(a, b):\n    # TODO: Add the two numbers and return the result\n    # Parameters:\n    #   a: first number\n    #   b: second number\n    # Return: sum of a and b\n    return 0  # Replace with your code\n\na, b = map(int, input().split())\nprint(add_numbers(2, 3))\n",
                "testCases": [
                  { "input": "2 3", "output": "5" },
                  { "input": "0 0", "output": "0" },
                  { "input": "10 20", "output": "30" }
                ]
              },
          {
            "id": 2,
            "title": "Leap Year Anniversary",
            "description": "Find if the given anniversary year is a leap year. If it is, print the next leap year; otherwise, print the previous leap year.",
            "sampleInput": "04/11/1947",
            "sampleOutput": "Given Anniversary Year: Non Leap Year. Anniversary Date: 04/11/1946",
            "sampleCode": "def is_leap_year(year):\n    # TODO: Check if year is leap year\n    # Return: True if leap year, False otherwise\n    # Hint: A year is leap if:\n    #   - Divisible by 4 AND\n    #   - Not divisible by 100 OR divisible by 400\n    return False\n\ndef find_nearest_leap_year(year, find_next):\n    # TODO: Find next or previous leap year\n    # Parameters:\n    #   year: current year\n    #   find_next: True to find next, False to find previous\n    # Return: nearest leap year\n    return year\n\n# Read input date\ndate = input().strip()\nyear = int(date.split('/')[-1])\n\n# Check if it's a leap year and find next/previous\ncurrent_is_leap = is_leap_year(year)\nif current_is_leap:\n    next_leap = find_nearest_leap_year(year, True)\n    print(f\"{year} is a Leap Year. Next Leap year: {next_leap}\")\nelse:\n    prev_leap = find_nearest_leap_year(year, False)\n    print(f\"{year} is not a Leap Year. Previous Leap year: {prev_leap}\")",
            "testCases": [
              { "input": "04/11/1947", "output": "1947 is not a Leap Year. Previous Leap year: 1944" },
              { "input": "04/11/2000", "output": "2000 is a Leap Year. Next Leap year: 2004" }
            ]
          },
          {
            "id": 3,
            "title": "Perfect Number",
            "description": "Write a program to check if a number is a perfect number.",
            "sampleInput": "6",
            "sampleOutput": "6 is a Perfect Number",
            "sampleCode": "def is_perfect_number(n):\n    # TODO: Check if n is a perfect number\n    # A perfect number is equal to the sum of its proper divisors\n    # Example: 6 = 1 + 2 + 3\n    # Parameters:\n    #   n: number to check\n    # Return: True if perfect number, False otherwise\n    return False\n\n# Read input\nnum = int(input())\n\n# Check and print result\nif is_perfect_number(num):\n    print(f\"{num} is a Perfect Number\")\nelse:\n    print(f\"{num} is not a Perfect Number\")",
            "testCases": [
              { "input": "6", "output": "6 is a Perfect Number" },
              { "input": "28", "output": "28 is a Perfect Number" },
              { "input": "10", "output": "10 is not a Perfect Number" }
            ]
          },
          {
            "id": 4,
            "title": "Pythagorean Triplets",
            "description": "Generate Pythagorean Triplets up to a given limit.",
            "sampleInput": "10",
            "sampleOutput": "3 4 5, 8 6 10",
            "sampleCode": "def generate_triplets(limit):\n    # TODO: Generate Pythagorean triplets up to limit\n    # A Pythagorean triplet is a set of numbers (a,b,c) where:\n    # a² + b² = c² and a,b,c <= limit\n    # Parameters:\n    #   limit: maximum value for any number in triplet\n    # Return: list of triplets as strings \"a b c\"\n    return []\n\n# Read input\nlimit = int(input())\n\n# Generate and print triplets\ntriplets = generate_triplets(limit)\nprint(\", \".join(triplets))",
            "testCases": [
              { "input": "10", "output": "3 4 5, 8 6 10" },
              { "input": "15", "output": "3 4 5, 8 6 10, 12 5 13" }
            ]
          },
          {
            "id": 5,
            "title": "Sum of Digits",
            "description": "Write a program to find the sum of digits of an N-digit number until the sum is a single digit.",
            "sampleInput": "143",
            "sampleOutput": "Sum of Digits: 8",
            "sampleCode": "def digital_root(n):\n    # TODO: Calculate digital root\n    # Keep summing digits until result is single digit\n    # Example: 143 -> 1+4+3=8\n    # Parameters:\n    #   n: input number\n    # Return: digital root (single digit)\n    return 0\n\n# Read input\nnum = int(input())\n\n# Calculate and print result\nprint(digital_root(num))",
            "testCases": [
              { "input": "143", "output": "8" },
              { "input": "987", "output": "6" }
            ]
          },
          {
            "id": 6,
            "title": "Armstrong Number",
            "description": "Check if a given number is an Armstrong number.",
            "sampleInput": "153",
            "sampleOutput": "Given number is Armstrong number",
            "sampleCode": "def is_armstrong_number(n):\n    # TODO: Check if n is an Armstrong number\n    # An Armstrong number is a number that equals the sum of its digits raised to the power of total digits\n    # Example: 153 = 1^3 + 5^3 + 3^3\n    # Parameters:\n    #   n: number to check\n    # Return: True if Armstrong number, False otherwise\n    return False\n\n# Read input\nnum = int(input())\n\n# Check and print result\nif is_armstrong_number(num):\n    print(\"Armstrong Number\")\nelse:\n    print(\"Not an Armstrong Number\")",
            "testCases": [
              { "input": "153", "output": "Armstrong Number" },
              { "input": "9474", "output": "Armstrong Number" },
              { "input": "123", "output": "Not an Armstrong Number" }
            ]
          },
          {
            "id": 7,
            "title": "Harshad Number",
            "description": "Check if a given number is a Harshad number.",
            "sampleInput": "21",
            "sampleOutput": "Given number is Harshad number",
            "sampleCode": "def is_harshad_number(n):\n    # TODO: Check if n is a Harshad number\n    # A Harshad number is divisible by the sum of its digits\n    # Example: 21 is Harshad because 21 is divisible by (2+1)\n    # Parameters:\n    #   n: number to check\n    # Return: True if Harshad number, False otherwise\n    return False\n\n# Read input\nnum = int(input())\n\n# Check and print result\nif is_harshad_number(num):\n    print(\"Harshad Number\")\nelse:\n    print(\"Not a Harshad Number\")",
            "testCases": [
              { "input": "21", "output": "Harshad Number" },
              { "input": "18", "output": "Harshad Number" },
              { "input": "19", "output": "Not a Harshad Number" }
            ]
          },
          {
            "id": 8,
            "title": "Happy Number",
            "description": "Check if a number is a Happy number.",
            "sampleInput": "19",
            "sampleOutput": "Given number is a Happy number",
            "sampleCode": "def is_happy_number(n):\n    # TODO: Check if n is a Happy number\n    # A Happy number is one where repeatedly summing squares of digits eventually equals 1\n    # Example: 19 -> 1² + 9² = 82 -> 8² + 2² = 68 -> 6² + 8² = 100 -> 1² + 0² + 0² = 1\n    # Parameters:\n    #   n: number to check\n    # Return: True if Happy number, False otherwise\n    return False\n\n# Read input\nnum = int(input())\n\n# Check and print result\nprint(str(is_happy_number(num)))",
            "testCases": [
              { "input": "19", "output": "True" },
              { "input": "7", "output": "True" },
              { "input": "20", "output": "False" }
            ]
          },
          {
            "id": 9,
            "title": "Tech Number",
            "description": "Check if a given number is a Tech number.",
            "sampleInput": "3025",
            "sampleOutput": "Given number is Tech number",
            "sampleCode": "def is_tech_number(n):\n    # TODO: Check if n is a Tech number\n    # A Tech number has even digits and when split in half, square of sum of both halves equals original number\n    # Example: 3025 -> (30+25)² = 55² = 3025\n    # Parameters:\n    #   n: number to check\n    # Return: True if Tech number, False otherwise\n    return False\n\n# Read input\nnum = int(input())\n\n# Check and print result\nif is_tech_number(num):\n    print(\"Tech Number\")\nelse:\n    print(\"Not a Tech Number\")",
            "testCases": [
              { "input": "3025", "output": "Tech Number" },
              { "input": "2025", "output": "Tech Number" },
              { "input": "1234", "output": "Not a Tech Number" }
            ]
          }
        ]
      },
      {
        "name": "Java",
        "problems": [
          {
            "id": 1,
            "title": "Multiply Numbers",
            "description": "Write a function that multiplies two numbers.",
            "sampleInput": "4 5",
            "sampleOutput": "20",
            "sampleCode": "import java.util.Scanner;\n\npublic class Main {\n    public static int multiply(int a, int b) {\n        // TODO: Multiply two numbers\n        // Parameters:\n        //   a, b: numbers to multiply\n        // Return: product of a and b\n        return 0;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int a = scanner.nextInt();\n        int b = scanner.nextInt();\n        System.out.println(multiply(a, b));\n        scanner.close();\n    } \n }",
            "testCases": [
              { "input": "4 5", "output": "20" },
              { "input": "2 3", "output": "6" }
            ]
          },
          {
            "id": 2,
            "title": "Convert String to Integer",
            "description": "Write a program to convert a given string to an integer.",
            "sampleInput": "1234",
            "sampleOutput": "Output Integer: 1234",
            "sampleCode": "import java.util.Scanner;\n\npublic class StringToInteger {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter a string: \");\n        String input = scanner.next();\n        int number = Integer.parseInt(input);\n        System.out.println(\"Output Integer: \" + number);\n        scanner.close();\n    }\n}",
            "testCases": [
              { "input": "1234", "output": "Output Integer: 1234" },
              { "input": "5678", "output": "Output Integer: 5678" }
            ]
          },
          {
            "id": 3,
            "title": "Validate Username",
            "description": "Write a program to check if the entered username is valid by comparing two user inputs.",
            "sampleInput": "admin\nadmin",
            "sampleOutput": "Username is valid",
            "sampleCode": "import java.util.Scanner;\n\npublic class ValidateUsername {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n            String username1 = scanner.nextLine();\n      String username2 = scanner.nextLine();\n        if (username1.equals(username2)) {\n            System.out.println(\"Username is valid\");\n        } else {\n            System.out.println(\"Username is invalid\");\n        }\n        scanner.close();\n    }\n}",
            "testCases": [
              { "input": "admin\nadmin", "output": "Username is valid" },
              { "input": "user\nUser", "output": "Username is invalid" }
            ]
          }
        ]
      },
      {
        "name": "Cpp",
        "problems": [
          {
            "id": 1,
            "title": "Sum Array",
            "description": "Write a function that sums all elements in an array.",
            "sampleInput": "1 2 3 4",
            "sampleOutput": "10",
            "sampleCode": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint sumArray(vector<int>& arr) {\n    // TODO: Sum all elements in array\n    // Parameters:\n    //   arr: vector of integers\n    // Return: sum of all elements\n    return 0;\n}\n\nint main() {\n    int n;\n    vector<int> arr;\n    while (cin >> n) {\n        arr.push_back(n);\n    }\n    cout << sumArray(arr) << endl;\n    return 0;\n}",
            "testCases": [
              { "input": "1 2 3 4", "output": "10" },
              { "input": "5 5", "output": "10" }
            ]
          }
        ]
      },
      {
        "name": "C",
        "problems": [
          {
            "id": 1,
            "title": "Factorial",
            "description": "Write a function to compute the factorial of a number.",
            "sampleInput": "5",
            "sampleOutput": "120",
            "sampleCode": "#include <stdio.h>\n\nint factorial(int n) {\n    // TODO: Calculate factorial of n\n    // Parameters:\n    //   n: number to calculate factorial for\n    // Return: n!\n    return 0;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%d\\n\", factorial(n));\n    return 0;\n}",
            "testCases": [
              { "input": "5", "output": "120" },
              { "input": "3", "output": "6" }
            ]
          }
        ]
      }
    ]
  }
